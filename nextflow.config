
// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

includeConfig 'conf/tools/versions.config'
includeConfig 'conf/params/defaults.config'


// Global default params, used in configs
params {

	verbose			                      = false 
  help				                      = false
	outdir                     	      = './results'
  tracedir               		        = "${params.outdir}/08_pipeline_info"
	singularity_pull_docker_container = false
	max_cpus 			                    = 8 
	max_time		                      = 24.h
	monochrome_logs 		              = false
  mode = 'run'
}



// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  overwrite = true
  file = "${params.tracedir}/execution_timeline.html"
}
report {
  enabled = true
  overwrite = true
  file = "${params.tracedir}/execution_report.html"
}
trace {
  enabled = true
  overwrite = true
  file = "${params.tracedir}/execution_trace.txt"
}
dag {
  enabled = true
  overwrite = true
  file = "${params.tracedir}/pipeline_dag.svg"
}

manifest {
  name            = 'lipme/funcannot'
  author          = 'Sebastien Carrere'
  homePage        = 'https://lipm-gitlab.toulouse.inra.fr/E2P2'
  description     = 'Nextflow Functional Annotation Pipeline.'
  mainScript      = 'egn-ep.nf'
  nextflowVersion = '!>=20.11.0-edge'
  version         = "${params.e2p2_version}"
}



// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      return Math.min( obj, params.max_time as int )
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  }
}



profiles {
  debug { 
    process.beforeScript = 'echo $HOSTNAME' 
  }
  singularity {
    singularity.enabled = true
    singularity.autoMounts = true
  }
  lipme {
    process.beforeScript = 'echo $HOSTNAME' 
    includeConfig 'conf/profiles/lipme.config'
  }
  genotoul {
    includeConfig 'conf/profiles/genotoul.config'
  }	
}
